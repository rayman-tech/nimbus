// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  name, api_key
) VALUES (
  $1, $2
)
RETURNING id, name, api_key
`

type CreateProjectParams struct {
	Name   string
	ApiKey string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.ApiKey)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.ApiKey)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE id = $1
`

func (q *Queries) DeleteProject(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteProject, id)
	return err
}

const getProject = `-- name: GetProject :one
SELECT id, name, api_key FROM projects
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, id int64) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, id)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.ApiKey)
	return i, err
}

const listProjects = `-- name: ListProjects :many
SELECT id, name, api_key FROM projects
ORDER BY name
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.ID, &i.Name, &i.ApiKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
  set name = $2,
  api_key = $3
WHERE id = $1
RETURNING id, name, api_key
`

type UpdateProjectParams struct {
	ID     int64
	Name   string
	ApiKey string
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, updateProject, arg.ID, arg.Name, arg.ApiKey)
	var i Project
	err := row.Scan(&i.ID, &i.Name, &i.ApiKey)
	return i, err
}
