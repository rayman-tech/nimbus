// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
  name, api_key
) VALUES (
  $1, $2
)
RETURNING name, api_key
`

type CreateProjectParams struct {
	Name   string
	ApiKey string
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRow(ctx, createProject, arg.Name, arg.ApiKey)
	var i Project
	err := row.Scan(&i.Name, &i.ApiKey)
	return i, err
}

const createService = `-- name: CreateService :one
INSERT INTO services (
  name, project_name, node_ports, ingress
) VALUES (
  $1, $2, $3, $4
)
RETURNING name, project_name, node_ports, ingress
`

type CreateServiceParams struct {
	Name        string
	ProjectName string
	NodePorts   []int32
	Ingress     pgtype.Text
}

func (q *Queries) CreateService(ctx context.Context, arg CreateServiceParams) (Service, error) {
	row := q.db.QueryRow(ctx, createService,
		arg.Name,
		arg.ProjectName,
		arg.NodePorts,
		arg.Ingress,
	)
	var i Service
	err := row.Scan(
		&i.Name,
		&i.ProjectName,
		&i.NodePorts,
		&i.Ingress,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects
WHERE name = $1
`

func (q *Queries) DeleteProject(ctx context.Context, name string) error {
	_, err := q.db.Exec(ctx, deleteProject, name)
	return err
}

const deleteService = `-- name: DeleteService :exec
DELETE FROM services
WHERE name = $1 AND project_name = $2
`

type DeleteServiceParams struct {
	Name        string
	ProjectName string
}

func (q *Queries) DeleteService(ctx context.Context, arg DeleteServiceParams) error {
	_, err := q.db.Exec(ctx, deleteService, arg.Name, arg.ProjectName)
	return err
}

const getProject = `-- name: GetProject :one
SELECT name, api_key FROM projects
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetProject(ctx context.Context, name string) (Project, error) {
	row := q.db.QueryRow(ctx, getProject, name)
	var i Project
	err := row.Scan(&i.Name, &i.ApiKey)
	return i, err
}

const getProjectByApiKey = `-- name: GetProjectByApiKey :one
SELECT name, api_key FROM projects
WHERE projects.api_key = $1 LIMIT 1
`

func (q *Queries) GetProjectByApiKey(ctx context.Context, apiKey string) (Project, error) {
	row := q.db.QueryRow(ctx, getProjectByApiKey, apiKey)
	var i Project
	err := row.Scan(&i.Name, &i.ApiKey)
	return i, err
}

const getService = `-- name: GetService :one
SELECT name, project_name, node_ports, ingress FROM services
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetService(ctx context.Context, name string) (Service, error) {
	row := q.db.QueryRow(ctx, getService, name)
	var i Service
	err := row.Scan(
		&i.Name,
		&i.ProjectName,
		&i.NodePorts,
		&i.Ingress,
	)
	return i, err
}

const getServicesByProject = `-- name: GetServicesByProject :many
SELECT name, project_name, node_ports, ingress FROM services
WHERE project_name = $1
`

func (q *Queries) GetServicesByProject(ctx context.Context, projectName string) ([]Service, error) {
	rows, err := q.db.Query(ctx, getServicesByProject, projectName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.Name,
			&i.ProjectName,
			&i.NodePorts,
			&i.Ingress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjects = `-- name: ListProjects :many
SELECT name, api_key FROM projects
ORDER BY name
`

func (q *Queries) ListProjects(ctx context.Context) ([]Project, error) {
	rows, err := q.db.Query(ctx, listProjects)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(&i.Name, &i.ApiKey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServices = `-- name: ListServices :many
SELECT name, project_name, node_ports, ingress FROM services
WHERE project_name = $1
ORDER BY name
`

func (q *Queries) ListServices(ctx context.Context, projectName string) ([]Service, error) {
	rows, err := q.db.Query(ctx, listServices, projectName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Service
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.Name,
			&i.ProjectName,
			&i.NodePorts,
			&i.Ingress,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setServiceIngress = `-- name: SetServiceIngress :exec
UPDATE services SET
  ingress = $3
WHERE name = $1 AND project_name = $2 RETURNING name, project_name, node_ports, ingress
`

type SetServiceIngressParams struct {
	Name        string
	ProjectName string
	Ingress     pgtype.Text
}

func (q *Queries) SetServiceIngress(ctx context.Context, arg SetServiceIngressParams) error {
	_, err := q.db.Exec(ctx, setServiceIngress, arg.Name, arg.ProjectName, arg.Ingress)
	return err
}

const setServiceNodePorts = `-- name: SetServiceNodePorts :exec
UPDATE services SET
  node_ports = $3
WHERE name = $1 AND project_name = $2 RETURNING name, project_name, node_ports, ingress
`

type SetServiceNodePortsParams struct {
	Name        string
	ProjectName string
	NodePorts   []int32
}

func (q *Queries) SetServiceNodePorts(ctx context.Context, arg SetServiceNodePortsParams) error {
	_, err := q.db.Exec(ctx, setServiceNodePorts, arg.Name, arg.ProjectName, arg.NodePorts)
	return err
}
